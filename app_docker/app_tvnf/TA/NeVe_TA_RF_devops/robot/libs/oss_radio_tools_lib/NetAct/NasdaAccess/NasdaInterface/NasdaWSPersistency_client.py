##################################################
# file: NasdaWSPersistency_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py -b NasdaWSPersistencyService.wsdl
# 
##################################################

from NasdaWSPersistency_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class NasdaWSPersistencyServiceLocator:
    NasdaWSPersistencyPort_address = "http://SERVER_NAME/netact/oss/nasda/ws-api/NasdaWSPersistencyServiceSOAP"
    def getNasdaWSPersistencyPortAddress(self):
        return NasdaWSPersistencyServiceLocator.NasdaWSPersistencyPort_address
    def getNasdaWSPersistencyPort(self, url=None, **kw):
        return NasdaWSPersistencyPortBindingSOAP(url or NasdaWSPersistencyServiceLocator.NasdaWSPersistencyPort_address, **kw)

# Methods
class NasdaWSPersistencyPortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: getMOLites
    def getMOLites(self, request, **kw):
        if isinstance(request, getMOLitesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/getMOLites", **kw)
        # no output wsaction
        response = self.binding.Receive(getMOLitesResponse.typecode)
        return response

    # op: getManagedObjects
    def getManagedObjects(self, request, **kw):
        if isinstance(request, getManagedObjectsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/getManagedObjects", **kw)
        # no output wsaction
        response = self.binding.Receive(getManagedObjectsResponse.typecode)
        return response

    # op: getRelatedMOLites
    def getRelatedMOLites(self, request, **kw):
        if isinstance(request, getRelatedMOLitesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/getRelatedMOLites", **kw)
        # no output wsaction
        response = self.binding.Receive(getRelatedMOLitesResponse.typecode)
        return response

    # op: createManagedObjects
    def createManagedObjects(self, request, **kw):
        if isinstance(request, createManagedObjectsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/createManagedObjects", **kw)
        # no output wsaction
        response = self.binding.Receive(createManagedObjectsResponse.typecode)
        return response

    # op: updateManagedObjects
    def updateManagedObjects(self, request, **kw):
        if isinstance(request, updateManagedObjectsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/updateManagedObjects", **kw)
        # no output wsaction
        response = self.binding.Receive(updateManagedObjectsResponse.typecode)
        return response

    # op: deleteManagedObjects
    def deleteManagedObjects(self, request, **kw):
        if isinstance(request, deleteManagedObjectsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/deleteManagedObjects", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteManagedObjectsResponse.typecode)
        return response

    # op: createRelationships
    def createRelationships(self, request, **kw):
        if isinstance(request, createRelationshipsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/relationshipservice/createRelationships", **kw)
        # no output wsaction
        response = self.binding.Receive(createRelationshipsResponse.typecode)
        return response

    # op: deleteRelationships
    def deleteRelationships(self, request, **kw):
        if isinstance(request, deleteRelationshipsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/relationshipservice/removeRelationships", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteRelationshipsResponse.typecode)
        return response

    # op: queryMOLites
    def queryMOLites(self, request, **kw):
        if isinstance(request, queryMOLitesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/queryMOLites", **kw)
        # no output wsaction
        response = self.binding.Receive(queryMOLitesResponse.typecode)
        return response

    # op: getMetadata
    def getMetadata(self, request, **kw):
        if isinstance(request, getMetadataRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/getMetadata", **kw)
        # no output wsaction
        response = self.binding.Receive(getMetadataResponse.typecode)
        return response

getMOLitesRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "GetMOLitesRequest").pyclass

getMOLitesResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "GetMOLitesResponse").pyclass

getManagedObjectsRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "GetMOsRequest").pyclass

getManagedObjectsResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "GetMOsResponse").pyclass

getRelatedMOLitesRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "GetRelatedMOLitesRequest").pyclass

getRelatedMOLitesResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "GetRelatedMOLitesResponse").pyclass

createManagedObjectsRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "CreateMOsRequest").pyclass

createManagedObjectsResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "CreateMOsResponse").pyclass

updateManagedObjectsRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "UpdateMOsRequest").pyclass

updateManagedObjectsResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "UpdateMOsResponse").pyclass

deleteManagedObjectsRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "DeleteMOsRequest").pyclass

deleteManagedObjectsResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "DeleteMOsResponse").pyclass

createRelationshipsRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "CreateRelationshipsRequest").pyclass

createRelationshipsResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "CreateRelationshipsResponse").pyclass

deleteRelationshipsRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "RemoveRelationshipsRequest").pyclass

deleteRelationshipsResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "RemoveRelationshipsResponse").pyclass

queryMOLitesRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "QueryMOLitesRequest").pyclass

queryMOLitesResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "QueryMOLitesResponse").pyclass

getMetadataRequest = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "GetMetadataRequest").pyclass

getMetadataResponse = GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations", "GetMetadataResponse").pyclass
