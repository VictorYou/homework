##################################################
# file: NasdaWSPersistency_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b NasdaWSPersistencyService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model
##############################

class ns3:
    targetNamespace = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"

    class MOLite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "MOLite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.MOLite_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","moId")] = ns3.MOId_Def(None)
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","metaClass")] = ZSI.TC.String()
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","metaVersion")] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "MOLite_Holder"
            self.pyclass = Holder

    class MOId_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "MOId")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ManagedObject_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "ManagedObject")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ManagedObject_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","metaClass")] = ZSI.TC.String()
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","metaVersion")] = ZSI.TC.String()
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","moId")] = ns3.MOId_Def(None)
            if ns3.ParameterContainer_Def not in ns3.ManagedObject_Def.__bases__:
                bases = list(ns3.ManagedObject_Def.__bases__)
                bases.insert(0, ns3.ParameterContainer_Def)
                ns3.ManagedObject_Def.__bases__ = tuple(bases)

            ns3.ParameterContainer_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class P_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "P")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["name"] = ZSI.TC.String()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class Item_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "Item")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Item_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","p",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p = None
                    return
            Holder.__name__ = "Item_Holder"
            self.pyclass = Holder

    class List_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "List")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.List_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["name"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "List_Holder"
            self.pyclass = Holder

    class ParameterContainer_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "ParameterContainer")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ParameterContainer_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","p",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","scalarList",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","structList",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._p = None
                    self._scalarList = None
                    self._structList = None
                    return
            Holder.__name__ = "ParameterContainer_Holder"
            self.pyclass = Holder

    class StructList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "StructList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.StructList_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","item",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.List_Def not in ns3.StructList_Def.__bases__:
                bases = list(ns3.StructList_Def.__bases__)
                bases.insert(0, ns3.List_Def)
                ns3.StructList_Def.__bases__ = tuple(bases)

            ns3.List_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ScalarList_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "ScalarList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ScalarList_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","p",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.List_Def not in ns3.ScalarList_Def.__bases__:
                bases = list(ns3.ScalarList_Def.__bases__)
                bases.insert(0, ns3.List_Def)
                ns3.ScalarList_Def.__bases__ = tuple(bases)

            ns3.List_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RelationshipId_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "RelationshipId")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Relationship_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        type = (schema, "Relationship")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Relationship_Def.schema
            TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","RelationshipId",lazy=False)(pname=(ns,"relationshipId"), aname="_relationshipId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","MOId",lazy=False)(pname=(ns,"sourceMOId"), aname="_sourceMOId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","MOId",lazy=False)(pname=(ns,"targetMOId"), aname="_targetMOId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._relationshipId = None
                    self._sourceMOId = None
                    self._targetMOId = None
                    return
            Holder.__name__ = "Relationship_Holder"
            self.pyclass = Holder

    class p_Dec(ElementDeclaration):
        literal = "p"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","p")
            kw["aname"] = "_p"
            if ns3.P_Def not in ns3.p_Dec.__bases__:
                bases = list(ns3.p_Dec.__bases__)
                bases.insert(0, ns3.P_Def)
                ns3.p_Dec.__bases__ = tuple(bases)

            ns3.P_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "p_Dec_Holder"

    class item_Dec(ElementDeclaration):
        literal = "item"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","item")
            kw["aname"] = "_item"
            if ns3.Item_Def not in ns3.item_Dec.__bases__:
                bases = list(ns3.item_Dec.__bases__)
                bases.insert(0, ns3.Item_Def)
                ns3.item_Dec.__bases__ = tuple(bases)

            ns3.Item_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "item_Dec_Holder"

    class list_Dec(ElementDeclaration):
        literal = "list"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","list")
            kw["aname"] = "_list"
            if ns3.List_Def not in ns3.list_Dec.__bases__:
                bases = list(ns3.list_Dec.__bases__)
                bases.insert(0, ns3.List_Def)
                ns3.list_Dec.__bases__ = tuple(bases)

            ns3.List_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "list_Dec_Holder"

    class moLite_Dec(ElementDeclaration):
        literal = "moLite"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","moLite")
            kw["aname"] = "_moLite"
            if ns3.MOLite_Def not in ns3.moLite_Dec.__bases__:
                bases = list(ns3.moLite_Dec.__bases__)
                bases.insert(0, ns3.MOLite_Def)
                ns3.moLite_Dec.__bases__ = tuple(bases)

            ns3.MOLite_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "moLite_Dec_Holder"

    class managedObject_Dec(ElementDeclaration):
        literal = "managedObject"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","managedObject")
            kw["aname"] = "_managedObject"
            if ns3.ManagedObject_Def not in ns3.managedObject_Dec.__bases__:
                bases = list(ns3.managedObject_Dec.__bases__)
                bases.insert(0, ns3.ManagedObject_Def)
                ns3.managedObject_Dec.__bases__ = tuple(bases)

            ns3.ManagedObject_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "managedObject_Dec_Holder"

    class relationshipId_Dec(ElementDeclaration):
        literal = "relationshipId"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","relationshipId")
            kw["aname"] = "_relationshipId"
            if ns3.RelationshipId_Def not in ns3.relationshipId_Dec.__bases__:
                bases = list(ns3.relationshipId_Dec.__bases__)
                bases.insert(0, ns3.RelationshipId_Def)
                ns3.relationshipId_Dec.__bases__ = tuple(bases)

            ns3.RelationshipId_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "relationshipId_Dec_Holder"

    class relationship_Dec(ElementDeclaration):
        literal = "relationship"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","relationship")
            kw["aname"] = "_relationship"
            if ns3.Relationship_Def not in ns3.relationship_Dec.__bases__:
                bases = list(ns3.relationship_Dec.__bases__)
                bases.insert(0, ns3.Relationship_Def)
                ns3.relationship_Dec.__bases__ = tuple(bases)

            ns3.Relationship_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "relationship_Dec_Holder"

    class structList_Dec(ElementDeclaration):
        literal = "structList"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","list")
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","structList")
            kw["aname"] = "_structList"
            if ns3.StructList_Def not in ns3.structList_Dec.__bases__:
                bases = list(ns3.structList_Dec.__bases__)
                bases.insert(0, ns3.StructList_Def)
                ns3.structList_Dec.__bases__ = tuple(bases)

            ns3.StructList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "structList_Dec_Holder"

    class scalarList_Dec(ElementDeclaration):
        literal = "scalarList"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model"
        substitutionGroup = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","list")
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","scalarList")
            kw["aname"] = "_scalarList"
            if ns3.ScalarList_Def not in ns3.scalarList_Dec.__bases__:
                bases = list(ns3.scalarList_Dec.__bases__)
                bases.insert(0, ns3.ScalarList_Def)
                ns3.scalarList_Dec.__bases__ = tuple(bases)

            ns3.ScalarList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "scalarList_Dec_Holder"

# end class ns3 (tns: http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model)

##############################
# targetNamespace
# http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations
##############################

class ns1:
    targetNamespace = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"

    class GetMOLitesResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "GetMOLitesResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GetMOLitesResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.GetMOLitesResponse_Def.__bases__:
                bases = list(ns1.GetMOLitesResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.GetMOLitesResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.GetMOLitesResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOLiteResult",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._batchItemMOLiteResult = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class BatchItemMOLiteResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "BatchItemMOLiteResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BatchItemMOLiteResult_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","moLite",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseBatchItemResult_Def not in ns1.BatchItemMOLiteResult_Def.__bases__:
                bases = list(ns1.BatchItemMOLiteResult_Def.__bases__)
                bases.insert(0, ns2.BaseBatchItemResult_Def)
                ns1.BatchItemMOLiteResult_Def.__bases__ = tuple(bases)

            ns2.BaseBatchItemResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMOLitesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "GetMOLitesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetMOLitesRequest_Def.schema
            TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","MOId",lazy=False)(pname=(ns,"moId"), aname="_moId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._moId = []
                    return
            Holder.__name__ = "GetMOLitesRequest_Holder"
            self.pyclass = Holder

    class BatchItemMOResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "BatchItemMOResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BatchItemMOResult_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","managedObject",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseBatchItemResult_Def not in ns1.BatchItemMOResult_Def.__bases__:
                bases = list(ns1.BatchItemMOResult_Def.__bases__)
                bases.insert(0, ns2.BaseBatchItemResult_Def)
                ns1.BatchItemMOResult_Def.__bases__ = tuple(bases)

            ns2.BaseBatchItemResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GetMOsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "GetMOsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetMOsRequest_Def.schema
            TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","MOId",lazy=False)(pname=(ns,"moId"), aname="_moId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._moId = []
                    return
            Holder.__name__ = "GetMOsRequest_Holder"
            self.pyclass = Holder

    class GetMOsResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "GetMOsResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GetMOsResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.GetMOsResponse_Def.__bases__:
                bases = list(ns1.GetMOsResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.GetMOsResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.GetMOsResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOResult",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._batchItemMOResult = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class GetRelatedMOLitesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "GetRelatedMOLitesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetRelatedMOLitesRequest_Def.schema
            TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","RelationshipId",lazy=False)(pname=(ns,"relationship"), aname="_relationship", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","MOId",lazy=False)(pname=(ns,"moId"), aname="_moId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._relationship = None
                    self._moId = []
                    return
            Holder.__name__ = "GetRelatedMOLitesRequest_Holder"
            self.pyclass = Holder

    class GetRelatedMOLitesResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "GetRelatedMOLitesResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GetRelatedMOLitesResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.GetRelatedMOLitesResponse_Def.__bases__:
                bases = list(ns1.GetRelatedMOLitesResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.GetRelatedMOLitesResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.GetRelatedMOLitesResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOLiteSequenceResult",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._batchItemMOLiteSequenceResult = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class BatchItemMOLiteSequenceResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "BatchItemMOLiteSequenceResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BatchItemMOLiteSequenceResult_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","moLite",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseBatchItemResult_Def not in ns1.BatchItemMOLiteSequenceResult_Def.__bases__:
                bases = list(ns1.BatchItemMOLiteSequenceResult_Def.__bases__)
                bases.insert(0, ns2.BaseBatchItemResult_Def)
                ns1.BatchItemMOLiteSequenceResult_Def.__bases__ = tuple(bases)

            ns2.BaseBatchItemResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BatchItemMOSequenceResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "BatchItemMOSequenceResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BatchItemMOSequenceResult_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","managedObject",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseBatchItemResult_Def not in ns1.BatchItemMOSequenceResult_Def.__bases__:
                bases = list(ns1.BatchItemMOSequenceResult_Def.__bases__)
                bases.insert(0, ns2.BaseBatchItemResult_Def)
                ns1.BatchItemMOSequenceResult_Def.__bases__ = tuple(bases)

            ns2.BaseBatchItemResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CreateMOsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "CreateMOsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CreateMOsRequest_Def.schema
            TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","ManagedObject",lazy=False)(pname=(ns,"managedObject"), aname="_managedObject", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._managedObject = []
                    return
            Holder.__name__ = "CreateMOsRequest_Holder"
            self.pyclass = Holder

    class UpdateMOsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "UpdateMOsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.UpdateMOsRequest_Def.schema
            TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","ManagedObject",lazy=False)(pname=(ns,"managedObject"), aname="_managedObject", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._managedObject = []
                    return
            Holder.__name__ = "UpdateMOsRequest_Holder"
            self.pyclass = Holder

    class DeleteMOsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "DeleteMOsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.DeleteMOsRequest_Def.schema
            TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","MOId",lazy=False)(pname=(ns,"moId"), aname="_moId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._moId = []
                    return
            Holder.__name__ = "DeleteMOsRequest_Holder"
            self.pyclass = Holder

    class CreateMOsResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "CreateMOsResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.CreateMOsResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.CreateMOsResponse_Def.__bases__:
                bases = list(ns1.CreateMOsResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.CreateMOsResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.CreateMOsResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOLiteResult",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._batchItemMOLiteResult = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class DeleteMOsResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "DeleteMOsResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DeleteMOsResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.DeleteMOsResponse_Def.__bases__:
                bases = list(ns1.DeleteMOsResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.DeleteMOsResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.DeleteMOsResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOLiteResult",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._batchItemMOLiteResult = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class UpdateMOsResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "UpdateMOsResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.UpdateMOsResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.UpdateMOsResponse_Def.__bases__:
                bases = list(ns1.UpdateMOsResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.UpdateMOsResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.UpdateMOsResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOLiteResult",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._batchItemMOLiteResult = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class BatchItemRelationshipResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "BatchItemRelationshipResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BatchItemRelationshipResult_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseBatchItemResult_Def not in ns1.BatchItemRelationshipResult_Def.__bases__:
                bases = list(ns1.BatchItemRelationshipResult_Def.__bases__)
                bases.insert(0, ns2.BaseBatchItemResult_Def)
                ns1.BatchItemRelationshipResult_Def.__bases__ = tuple(bases)

            ns2.BaseBatchItemResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RelationshipsResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "RelationshipsResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.RelationshipsResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.RelationshipsResponse_Def.__bases__:
                bases = list(ns1.RelationshipsResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.RelationshipsResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.RelationshipsResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemRelationshipResult",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._batchItemRelationshipResult = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class RelationshipsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "RelationshipsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RelationshipsRequest_Def.schema
            TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","Relationship",lazy=False)(pname=(ns,"relationship"), aname="_relationship", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._relationship = []
                    return
            Holder.__name__ = "RelationshipsRequest_Holder"
            self.pyclass = Holder

    class QueryMOLitesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "QueryMOLitesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.QueryMOLitesRequest_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query","query",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query","variableBindings",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._query = None
                    self._variableBindings = None
                    return
            Holder.__name__ = "QueryMOLitesRequest_Holder"
            self.pyclass = Holder

    class QueryMOLitesResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "QueryMOLitesResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.QueryMOLitesResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.QueryMOLitesResponse_Def.__bases__:
                bases = list(ns1.QueryMOLitesResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.QueryMOLitesResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.QueryMOLitesResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/model","moLite",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._moLite = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class GetMetadataRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "GetMetadataRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetMetadataRequest_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetMetadataRequest_Holder"
            self.pyclass = Holder

    class GetMetadataResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        type = (schema, "GetMetadataResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GetMetadataResponse_Def.schema
            TClist = [self.__class__.result_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns1.GetMetadataResponse_Def.__bases__:
                bases = list(ns1.GetMetadataResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns1.GetMetadataResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class result_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "result"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
            def __init__(self, **kw):
                ns = ns1.GetMetadataResponse_Def.result_Dec.schema
                TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","managedObjectDefs",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","relationshipDefs",lazy=False, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","result")
                kw["aname"] = "_result"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._managedObjectDefs = None
                        self._relationshipDefs = None
                        return
                Holder.__name__ = "result_Holder"
                self.pyclass = Holder




    class batchItemMOLiteResult_Dec(ElementDeclaration):
        literal = "batchItemMOLiteResult"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOLiteResult")
            kw["aname"] = "_batchItemMOLiteResult"
            if ns1.BatchItemMOLiteResult_Def not in ns1.batchItemMOLiteResult_Dec.__bases__:
                bases = list(ns1.batchItemMOLiteResult_Dec.__bases__)
                bases.insert(0, ns1.BatchItemMOLiteResult_Def)
                ns1.batchItemMOLiteResult_Dec.__bases__ = tuple(bases)

            ns1.BatchItemMOLiteResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "batchItemMOLiteResult_Dec_Holder"

    class batchItemMOResult_Dec(ElementDeclaration):
        literal = "batchItemMOResult"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOResult")
            kw["aname"] = "_batchItemMOResult"
            if ns1.BatchItemMOResult_Def not in ns1.batchItemMOResult_Dec.__bases__:
                bases = list(ns1.batchItemMOResult_Dec.__bases__)
                bases.insert(0, ns1.BatchItemMOResult_Def)
                ns1.batchItemMOResult_Dec.__bases__ = tuple(bases)

            ns1.BatchItemMOResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "batchItemMOResult_Dec_Holder"

    class GetMOLitesRequest_Dec(ElementDeclaration):
        literal = "GetMOLitesRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","GetMOLitesRequest")
            kw["aname"] = "_GetMOLitesRequest"
            if ns1.GetMOLitesRequest_Def not in ns1.GetMOLitesRequest_Dec.__bases__:
                bases = list(ns1.GetMOLitesRequest_Dec.__bases__)
                bases.insert(0, ns1.GetMOLitesRequest_Def)
                ns1.GetMOLitesRequest_Dec.__bases__ = tuple(bases)

            ns1.GetMOLitesRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMOLitesRequest_Dec_Holder"

    class GetMOLitesResponse_Dec(ElementDeclaration):
        literal = "GetMOLitesResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","GetMOLitesResponse")
            kw["aname"] = "_GetMOLitesResponse"
            if ns1.GetMOLitesResponse_Def not in ns1.GetMOLitesResponse_Dec.__bases__:
                bases = list(ns1.GetMOLitesResponse_Dec.__bases__)
                bases.insert(0, ns1.GetMOLitesResponse_Def)
                ns1.GetMOLitesResponse_Dec.__bases__ = tuple(bases)

            ns1.GetMOLitesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMOLitesResponse_Dec_Holder"

    class GetMOsRequest_Dec(ElementDeclaration):
        literal = "GetMOsRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","GetMOsRequest")
            kw["aname"] = "_GetMOsRequest"
            if ns1.GetMOsRequest_Def not in ns1.GetMOsRequest_Dec.__bases__:
                bases = list(ns1.GetMOsRequest_Dec.__bases__)
                bases.insert(0, ns1.GetMOsRequest_Def)
                ns1.GetMOsRequest_Dec.__bases__ = tuple(bases)

            ns1.GetMOsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMOsRequest_Dec_Holder"

    class GetMOsResponse_Dec(ElementDeclaration):
        literal = "GetMOsResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","GetMOsResponse")
            kw["aname"] = "_GetMOsResponse"
            if ns1.GetMOsResponse_Def not in ns1.GetMOsResponse_Dec.__bases__:
                bases = list(ns1.GetMOsResponse_Dec.__bases__)
                bases.insert(0, ns1.GetMOsResponse_Def)
                ns1.GetMOsResponse_Dec.__bases__ = tuple(bases)

            ns1.GetMOsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMOsResponse_Dec_Holder"

    class batchItemMOLiteSequenceResult_Dec(ElementDeclaration):
        literal = "batchItemMOLiteSequenceResult"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOLiteSequenceResult")
            kw["aname"] = "_batchItemMOLiteSequenceResult"
            if ns1.BatchItemMOLiteSequenceResult_Def not in ns1.batchItemMOLiteSequenceResult_Dec.__bases__:
                bases = list(ns1.batchItemMOLiteSequenceResult_Dec.__bases__)
                bases.insert(0, ns1.BatchItemMOLiteSequenceResult_Def)
                ns1.batchItemMOLiteSequenceResult_Dec.__bases__ = tuple(bases)

            ns1.BatchItemMOLiteSequenceResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "batchItemMOLiteSequenceResult_Dec_Holder"

    class batchItemMOSequenceResult_Dec(ElementDeclaration):
        literal = "batchItemMOSequenceResult"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemMOSequenceResult")
            kw["aname"] = "_batchItemMOSequenceResult"
            if ns1.BatchItemMOSequenceResult_Def not in ns1.batchItemMOSequenceResult_Dec.__bases__:
                bases = list(ns1.batchItemMOSequenceResult_Dec.__bases__)
                bases.insert(0, ns1.BatchItemMOSequenceResult_Def)
                ns1.batchItemMOSequenceResult_Dec.__bases__ = tuple(bases)

            ns1.BatchItemMOSequenceResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "batchItemMOSequenceResult_Dec_Holder"

    class GetRelatedMOLitesRequest_Dec(ElementDeclaration):
        literal = "GetRelatedMOLitesRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","GetRelatedMOLitesRequest")
            kw["aname"] = "_GetRelatedMOLitesRequest"
            if ns1.GetRelatedMOLitesRequest_Def not in ns1.GetRelatedMOLitesRequest_Dec.__bases__:
                bases = list(ns1.GetRelatedMOLitesRequest_Dec.__bases__)
                bases.insert(0, ns1.GetRelatedMOLitesRequest_Def)
                ns1.GetRelatedMOLitesRequest_Dec.__bases__ = tuple(bases)

            ns1.GetRelatedMOLitesRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetRelatedMOLitesRequest_Dec_Holder"

    class GetRelatedMOLitesResponse_Dec(ElementDeclaration):
        literal = "GetRelatedMOLitesResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","GetRelatedMOLitesResponse")
            kw["aname"] = "_GetRelatedMOLitesResponse"
            if ns1.GetRelatedMOLitesResponse_Def not in ns1.GetRelatedMOLitesResponse_Dec.__bases__:
                bases = list(ns1.GetRelatedMOLitesResponse_Dec.__bases__)
                bases.insert(0, ns1.GetRelatedMOLitesResponse_Def)
                ns1.GetRelatedMOLitesResponse_Dec.__bases__ = tuple(bases)

            ns1.GetRelatedMOLitesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetRelatedMOLitesResponse_Dec_Holder"

    class CreateMOsRequest_Dec(ElementDeclaration):
        literal = "CreateMOsRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","CreateMOsRequest")
            kw["aname"] = "_CreateMOsRequest"
            if ns1.CreateMOsRequest_Def not in ns1.CreateMOsRequest_Dec.__bases__:
                bases = list(ns1.CreateMOsRequest_Dec.__bases__)
                bases.insert(0, ns1.CreateMOsRequest_Def)
                ns1.CreateMOsRequest_Dec.__bases__ = tuple(bases)

            ns1.CreateMOsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateMOsRequest_Dec_Holder"

    class CreateMOsResponse_Dec(ElementDeclaration):
        literal = "CreateMOsResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","CreateMOsResponse")
            kw["aname"] = "_CreateMOsResponse"
            if ns1.CreateMOsResponse_Def not in ns1.CreateMOsResponse_Dec.__bases__:
                bases = list(ns1.CreateMOsResponse_Dec.__bases__)
                bases.insert(0, ns1.CreateMOsResponse_Def)
                ns1.CreateMOsResponse_Dec.__bases__ = tuple(bases)

            ns1.CreateMOsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateMOsResponse_Dec_Holder"

    class UpdateMOsRequest_Dec(ElementDeclaration):
        literal = "UpdateMOsRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","UpdateMOsRequest")
            kw["aname"] = "_UpdateMOsRequest"
            if ns1.UpdateMOsRequest_Def not in ns1.UpdateMOsRequest_Dec.__bases__:
                bases = list(ns1.UpdateMOsRequest_Dec.__bases__)
                bases.insert(0, ns1.UpdateMOsRequest_Def)
                ns1.UpdateMOsRequest_Dec.__bases__ = tuple(bases)

            ns1.UpdateMOsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UpdateMOsRequest_Dec_Holder"

    class UpdateMOsResponse_Dec(ElementDeclaration):
        literal = "UpdateMOsResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","UpdateMOsResponse")
            kw["aname"] = "_UpdateMOsResponse"
            if ns1.UpdateMOsResponse_Def not in ns1.UpdateMOsResponse_Dec.__bases__:
                bases = list(ns1.UpdateMOsResponse_Dec.__bases__)
                bases.insert(0, ns1.UpdateMOsResponse_Def)
                ns1.UpdateMOsResponse_Dec.__bases__ = tuple(bases)

            ns1.UpdateMOsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UpdateMOsResponse_Dec_Holder"

    class DeleteMOsRequest_Dec(ElementDeclaration):
        literal = "DeleteMOsRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","DeleteMOsRequest")
            kw["aname"] = "_DeleteMOsRequest"
            if ns1.DeleteMOsRequest_Def not in ns1.DeleteMOsRequest_Dec.__bases__:
                bases = list(ns1.DeleteMOsRequest_Dec.__bases__)
                bases.insert(0, ns1.DeleteMOsRequest_Def)
                ns1.DeleteMOsRequest_Dec.__bases__ = tuple(bases)

            ns1.DeleteMOsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DeleteMOsRequest_Dec_Holder"

    class DeleteMOsResponse_Dec(ElementDeclaration):
        literal = "DeleteMOsResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","DeleteMOsResponse")
            kw["aname"] = "_DeleteMOsResponse"
            if ns1.DeleteMOsResponse_Def not in ns1.DeleteMOsResponse_Dec.__bases__:
                bases = list(ns1.DeleteMOsResponse_Dec.__bases__)
                bases.insert(0, ns1.DeleteMOsResponse_Def)
                ns1.DeleteMOsResponse_Dec.__bases__ = tuple(bases)

            ns1.DeleteMOsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DeleteMOsResponse_Dec_Holder"

    class batchItemRelationshipResult_Dec(ElementDeclaration):
        literal = "batchItemRelationshipResult"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","batchItemRelationshipResult")
            kw["aname"] = "_batchItemRelationshipResult"
            if ns1.BatchItemRelationshipResult_Def not in ns1.batchItemRelationshipResult_Dec.__bases__:
                bases = list(ns1.batchItemRelationshipResult_Dec.__bases__)
                bases.insert(0, ns1.BatchItemRelationshipResult_Def)
                ns1.batchItemRelationshipResult_Dec.__bases__ = tuple(bases)

            ns1.BatchItemRelationshipResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "batchItemRelationshipResult_Dec_Holder"

    class CreateRelationshipsRequest_Dec(ElementDeclaration):
        literal = "CreateRelationshipsRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","CreateRelationshipsRequest")
            kw["aname"] = "_CreateRelationshipsRequest"
            if ns1.RelationshipsRequest_Def not in ns1.CreateRelationshipsRequest_Dec.__bases__:
                bases = list(ns1.CreateRelationshipsRequest_Dec.__bases__)
                bases.insert(0, ns1.RelationshipsRequest_Def)
                ns1.CreateRelationshipsRequest_Dec.__bases__ = tuple(bases)

            ns1.RelationshipsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateRelationshipsRequest_Dec_Holder"

    class CreateRelationshipsResponse_Dec(ElementDeclaration):
        literal = "CreateRelationshipsResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","CreateRelationshipsResponse")
            kw["aname"] = "_CreateRelationshipsResponse"
            if ns1.RelationshipsResponse_Def not in ns1.CreateRelationshipsResponse_Dec.__bases__:
                bases = list(ns1.CreateRelationshipsResponse_Dec.__bases__)
                bases.insert(0, ns1.RelationshipsResponse_Def)
                ns1.CreateRelationshipsResponse_Dec.__bases__ = tuple(bases)

            ns1.RelationshipsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "CreateRelationshipsResponse_Dec_Holder"

    class RemoveRelationshipsRequest_Dec(ElementDeclaration):
        literal = "RemoveRelationshipsRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","RemoveRelationshipsRequest")
            kw["aname"] = "_RemoveRelationshipsRequest"
            if ns1.RelationshipsRequest_Def not in ns1.RemoveRelationshipsRequest_Dec.__bases__:
                bases = list(ns1.RemoveRelationshipsRequest_Dec.__bases__)
                bases.insert(0, ns1.RelationshipsRequest_Def)
                ns1.RemoveRelationshipsRequest_Dec.__bases__ = tuple(bases)

            ns1.RelationshipsRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RemoveRelationshipsRequest_Dec_Holder"

    class RemoveRelationshipsResponse_Dec(ElementDeclaration):
        literal = "RemoveRelationshipsResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","RemoveRelationshipsResponse")
            kw["aname"] = "_RemoveRelationshipsResponse"
            if ns1.RelationshipsResponse_Def not in ns1.RemoveRelationshipsResponse_Dec.__bases__:
                bases = list(ns1.RemoveRelationshipsResponse_Dec.__bases__)
                bases.insert(0, ns1.RelationshipsResponse_Def)
                ns1.RemoveRelationshipsResponse_Dec.__bases__ = tuple(bases)

            ns1.RelationshipsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RemoveRelationshipsResponse_Dec_Holder"

    class QueryMOLitesRequest_Dec(ElementDeclaration):
        literal = "QueryMOLitesRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","QueryMOLitesRequest")
            kw["aname"] = "_QueryMOLitesRequest"
            if ns1.QueryMOLitesRequest_Def not in ns1.QueryMOLitesRequest_Dec.__bases__:
                bases = list(ns1.QueryMOLitesRequest_Dec.__bases__)
                bases.insert(0, ns1.QueryMOLitesRequest_Def)
                ns1.QueryMOLitesRequest_Dec.__bases__ = tuple(bases)

            ns1.QueryMOLitesRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "QueryMOLitesRequest_Dec_Holder"

    class QueryMOLitesResponse_Dec(ElementDeclaration):
        literal = "QueryMOLitesResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","QueryMOLitesResponse")
            kw["aname"] = "_QueryMOLitesResponse"
            if ns1.QueryMOLitesResponse_Def not in ns1.QueryMOLitesResponse_Dec.__bases__:
                bases = list(ns1.QueryMOLitesResponse_Dec.__bases__)
                bases.insert(0, ns1.QueryMOLitesResponse_Def)
                ns1.QueryMOLitesResponse_Dec.__bases__ = tuple(bases)

            ns1.QueryMOLitesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "QueryMOLitesResponse_Dec_Holder"

    class GetMetadataRequest_Dec(ElementDeclaration):
        literal = "GetMetadataRequest"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","GetMetadataRequest")
            kw["aname"] = "_GetMetadataRequest"
            if ns1.GetMetadataRequest_Def not in ns1.GetMetadataRequest_Dec.__bases__:
                bases = list(ns1.GetMetadataRequest_Dec.__bases__)
                bases.insert(0, ns1.GetMetadataRequest_Def)
                ns1.GetMetadataRequest_Dec.__bases__ = tuple(bases)

            ns1.GetMetadataRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMetadataRequest_Dec_Holder"

    class GetMetadataResponse_Dec(ElementDeclaration):
        literal = "GetMetadataResponse"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations","GetMetadataResponse")
            kw["aname"] = "_GetMetadataResponse"
            if ns1.GetMetadataResponse_Def not in ns1.GetMetadataResponse_Dec.__bases__:
                bases = list(ns1.GetMetadataResponse_Dec.__bases__)
                bases.insert(0, ns1.GetMetadataResponse_Def)
                ns1.GetMetadataResponse_Dec.__bases__ = tuple(bases)

            ns1.GetMetadataResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetMetadataResponse_Dec_Holder"

# end class ns1 (tns: http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/operations)

##############################
# targetNamespace
# http://www.nsn.com/schemas/public/oss/nasda/ws-api/common
##############################

class ns2:
    targetNamespace = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/common"

    class ClientCredentials_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/common"
        type = (schema, "ClientCredentials")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ClientCredentials_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"clientId"), aname="_clientId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientPassword"), aname="_clientPassword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientId = None
                    self._clientPassword = None
                    return
            Holder.__name__ = "ClientCredentials_Holder"
            self.pyclass = Holder

    class BaseRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/common"
        type = (schema, "BaseRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.BaseRequest_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "BaseRequest_Holder"
            self.pyclass = Holder

    class BaseResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/common"
        type = (schema, "BaseResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.BaseResponse_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"errorCode"), aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cause"), aname="_cause", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorCode = None
                    self._cause = None
                    return
            Holder.__name__ = "BaseResponse_Holder"
            self.pyclass = Holder

    class BatchOperationResponse_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/common"
        type = (schema, "BatchOperationResponse")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.BatchOperationResponse_Def.schema
            TClist = [self.__class__.results_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BaseResponse_Def not in ns2.BatchOperationResponse_Def.__bases__:
                bases = list(ns2.BatchOperationResponse_Def.__bases__)
                bases.insert(0, ns2.BaseResponse_Def)
                ns2.BatchOperationResponse_Def.__bases__ = tuple(bases)

            ns2.BaseResponse_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)


        class results_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "results"
            schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/common"
            def __init__(self, **kw):
                ns = ns2.BatchOperationResponse_Def.results_Dec.schema
                TClist = [GTD("http://www.nsn.com/schemas/public/oss/nasda/ws-api/common","BaseBatchItemResult",lazy=False)(pname=(ns,"batchItemResult"), aname="_batchItemResult", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/common","results")
                kw["aname"] = "_results"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._batchItemResult = []
                        return
                Holder.__name__ = "results_Holder"
                self.pyclass = Holder




    class BaseBatchItemResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/common"
        type = (schema, "BaseBatchItemResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.BaseBatchItemResult_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"errorCode"), aname="_errorCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorCause"), aname="_errorCause", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorCode = None
                    self._errorCause = None
                    return
            Holder.__name__ = "BaseBatchItemResult_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://www.nsn.com/schemas/public/oss/nasda/ws-api/common)

##############################
# targetNamespace
# http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/
##############################

class ns0:
    targetNamespace = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/"

# end class ns0 (tns: http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/NasdaWSPersistency/)

##############################
# targetNamespace
# http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata
##############################

class ns4:
    targetNamespace = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"

    class PDef_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "PDef")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.PDef_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["name"] = ZSI.TC.String()
                self.attribute_typecode_dict["type"] = ns4.ValueType_Def(None)
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "PDef_Holder"
            self.pyclass = Holder

    class ValueType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "ValueType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ScalarListDef_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "ScalarListDef")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.ScalarListDef_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["type"] = ns4.ValueType_Def(None)
            if ns4.ListDef_Def not in ns4.ScalarListDef_Def.__bases__:
                bases = list(ns4.ScalarListDef_Def.__bases__)
                bases.insert(0, ns4.ListDef_Def)
                ns4.ScalarListDef_Def.__bases__ = tuple(bases)

            ns4.ListDef_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParameterContainerDef_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "ParameterContainerDef")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.ParameterContainerDef_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","pDef",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","scalarListDef",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","structListDef",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pDef = None
                    self._scalarListDef = None
                    self._structListDef = None
                    return
            Holder.__name__ = "ParameterContainerDef_Holder"
            self.pyclass = Holder

    class StructListDef_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "StructListDef")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.StructListDef_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","itemDef",lazy=False, isref=True)(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns4.ListDef_Def not in ns4.StructListDef_Def.__bases__:
                bases = list(ns4.StructListDef_Def.__bases__)
                bases.insert(0, ns4.ListDef_Def)
                ns4.StructListDef_Def.__bases__ = tuple(bases)

            ns4.ListDef_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ItemDef_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "ItemDef")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.ItemDef_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","pDef",lazy=False, isref=True)(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pDef = None
                    return
            Holder.__name__ = "ItemDef_Holder"
            self.pyclass = Holder

    class ManagedObjectDef_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "ManagedObjectDef")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns4.ManagedObjectDef_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","metaClass")] = ZSI.TC.String()
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","metaVersion")] = ZSI.TC.String()
            if ns4.ParameterContainerDef_Def not in ns4.ManagedObjectDef_Def.__bases__:
                bases = list(ns4.ManagedObjectDef_Def.__bases__)
                bases.insert(0, ns4.ParameterContainerDef_Def)
                ns4.ManagedObjectDef_Def.__bases__ = tuple(bases)

            ns4.ParameterContainerDef_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ManagedObjectDefs_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "ManagedObjectDefs")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.ManagedObjectDefs_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","managedObjectDef",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._managedObjectDef = None
                    return
            Holder.__name__ = "ManagedObjectDefs_Holder"
            self.pyclass = Holder

    class RelationshipDef_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "RelationshipDef")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.RelationshipDef_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","relationshipId")] = ns4.RelationshipId_Def(None)
                self.attribute_typecode_dict["sourceMetaClass"] = ZSI.TC.String()
                self.attribute_typecode_dict["targetMetaClass"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "RelationshipDef_Holder"
            self.pyclass = Holder

    class RelationshipDefs_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "RelationshipDefs")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.RelationshipDefs_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","relationshipDef",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._relationshipDef = None
                    return
            Holder.__name__ = "RelationshipDefs_Holder"
            self.pyclass = Holder

    class ListDef_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "ListDef")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns4.ListDef_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["name"] = ZSI.TC.String()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ListDef_Holder"
            self.pyclass = Holder

    class RelationshipId_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        type = (schema, "RelationshipId")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class pDef_Dec(ElementDeclaration):
        literal = "pDef"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","pDef")
            kw["aname"] = "_pDef"
            if ns4.PDef_Def not in ns4.pDef_Dec.__bases__:
                bases = list(ns4.pDef_Dec.__bases__)
                bases.insert(0, ns4.PDef_Def)
                ns4.pDef_Dec.__bases__ = tuple(bases)

            ns4.PDef_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "pDef_Dec_Holder"

    class scalarListDef_Dec(ElementDeclaration):
        literal = "scalarListDef"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","scalarListDef")
            kw["aname"] = "_scalarListDef"
            if ns4.ScalarListDef_Def not in ns4.scalarListDef_Dec.__bases__:
                bases = list(ns4.scalarListDef_Dec.__bases__)
                bases.insert(0, ns4.ScalarListDef_Def)
                ns4.scalarListDef_Dec.__bases__ = tuple(bases)

            ns4.ScalarListDef_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "scalarListDef_Dec_Holder"

    class structListDef_Dec(ElementDeclaration):
        literal = "structListDef"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","structListDef")
            kw["aname"] = "_structListDef"
            if ns4.StructListDef_Def not in ns4.structListDef_Dec.__bases__:
                bases = list(ns4.structListDef_Dec.__bases__)
                bases.insert(0, ns4.StructListDef_Def)
                ns4.structListDef_Dec.__bases__ = tuple(bases)

            ns4.StructListDef_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "structListDef_Dec_Holder"

    class itemDef_Dec(ElementDeclaration):
        literal = "itemDef"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","itemDef")
            kw["aname"] = "_itemDef"
            if ns4.ItemDef_Def not in ns4.itemDef_Dec.__bases__:
                bases = list(ns4.itemDef_Dec.__bases__)
                bases.insert(0, ns4.ItemDef_Def)
                ns4.itemDef_Dec.__bases__ = tuple(bases)

            ns4.ItemDef_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "itemDef_Dec_Holder"

    class managedObjectDef_Dec(ElementDeclaration):
        literal = "managedObjectDef"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","managedObjectDef")
            kw["aname"] = "_managedObjectDef"
            if ns4.ManagedObjectDef_Def not in ns4.managedObjectDef_Dec.__bases__:
                bases = list(ns4.managedObjectDef_Dec.__bases__)
                bases.insert(0, ns4.ManagedObjectDef_Def)
                ns4.managedObjectDef_Dec.__bases__ = tuple(bases)

            ns4.ManagedObjectDef_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "managedObjectDef_Dec_Holder"

    class managedObjectDefs_Dec(ElementDeclaration):
        literal = "managedObjectDefs"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","managedObjectDefs")
            kw["aname"] = "_managedObjectDefs"
            if ns4.ManagedObjectDefs_Def not in ns4.managedObjectDefs_Dec.__bases__:
                bases = list(ns4.managedObjectDefs_Dec.__bases__)
                bases.insert(0, ns4.ManagedObjectDefs_Def)
                ns4.managedObjectDefs_Dec.__bases__ = tuple(bases)

            ns4.ManagedObjectDefs_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "managedObjectDefs_Dec_Holder"

    class relationshipDef_Dec(ElementDeclaration):
        literal = "relationshipDef"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","relationshipDef")
            kw["aname"] = "_relationshipDef"
            if ns4.RelationshipDef_Def not in ns4.relationshipDef_Dec.__bases__:
                bases = list(ns4.relationshipDef_Dec.__bases__)
                bases.insert(0, ns4.RelationshipDef_Def)
                ns4.relationshipDef_Dec.__bases__ = tuple(bases)

            ns4.RelationshipDef_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "relationshipDef_Dec_Holder"

    class relationshipDefs_Dec(ElementDeclaration):
        literal = "relationshipDefs"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata","relationshipDefs")
            kw["aname"] = "_relationshipDefs"
            if ns4.RelationshipDefs_Def not in ns4.relationshipDefs_Dec.__bases__:
                bases = list(ns4.relationshipDefs_Dec.__bases__)
                bases.insert(0, ns4.RelationshipDefs_Def)
                ns4.relationshipDefs_Dec.__bases__ = tuple(bases)

            ns4.RelationshipDefs_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "relationshipDefs_Dec_Holder"

# end class ns4 (tns: http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/metadata)

##############################
# targetNamespace
# http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query
##############################

class ns5:
    targetNamespace = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query"

    class QueryType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query"
        type = (schema, "QueryType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VariableBinding_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query"
        type = (schema, "VariableBinding")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["name"] = ZSI.TC.String()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class VariableBindings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query"
        type = (schema, "VariableBindings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns5.VariableBindings_Def.schema
            TClist = [GED("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query","variableBinding",lazy=False, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variableBinding = None
                    return
            Holder.__name__ = "VariableBindings_Holder"
            self.pyclass = Holder

    class Query_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query"
        type = (schema, "Query")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class query_Dec(ElementDeclaration):
        literal = "query"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query","query")
            kw["aname"] = "_query"
            if ns5.Query_Def not in ns5.query_Dec.__bases__:
                bases = list(ns5.query_Dec.__bases__)
                bases.insert(0, ns5.Query_Def)
                ns5.query_Dec.__bases__ = tuple(bases)

            ns5.Query_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "query_Dec_Holder"

    class variableBinding_Dec(ElementDeclaration):
        literal = "variableBinding"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query","variableBinding")
            kw["aname"] = "_variableBinding"
            if ns5.VariableBinding_Def not in ns5.variableBinding_Dec.__bases__:
                bases = list(ns5.variableBinding_Dec.__bases__)
                bases.insert(0, ns5.VariableBinding_Def)
                ns5.variableBinding_Dec.__bases__ = tuple(bases)

            ns5.VariableBinding_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "variableBinding_Dec_Holder"

    class variableBindings_Dec(ElementDeclaration):
        literal = "variableBindings"
        schema = "http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query","variableBindings")
            kw["aname"] = "_variableBindings"
            if ns5.VariableBindings_Def not in ns5.variableBindings_Dec.__bases__:
                bases = list(ns5.variableBindings_Dec.__bases__)
                bases.insert(0, ns5.VariableBindings_Def)
                ns5.variableBindings_Dec.__bases__ = tuple(bases)

            ns5.VariableBindings_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "variableBindings_Dec_Holder"

# end class ns5 (tns: http://www.nsn.com/schemas/public/oss/nasda/ws-api/persistency/query)
